// <auto-generated />
using System;
using Audit.Infrastructures.Services.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Audit.Infrastructures.Migrations
{
    [DbContext(typeof(AuditDbContext))]
    [Migration("20240107225516_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Audit.Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditLogId"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventEntityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("AuditLogId");

                    b.HasIndex("EventId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Audit.Domain.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text2")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("EventId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ServiceId");

                    b.HasIndex("Text")
                        .IsUnique();

                    b.HasIndex("Text2")
                        .IsUnique()
                        .HasFilter("[Text2] IS NOT NULL");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            Name = "AddCodeType",
                            ServiceId = 1,
                            Text = "Add Code Type",
                            Text2 = "اضافة نوع كود"
                        },
                        new
                        {
                            EventId = 2,
                            Name = "EditCodeType",
                            ServiceId = 1,
                            Text = "Edit Code Type",
                            Text2 = "تعديل نوع كود"
                        },
                        new
                        {
                            EventId = 3,
                            Name = "DeleteCodeType",
                            ServiceId = 1,
                            Text = "Delete Code Type",
                            Text2 = "حذف نوع كود"
                        },
                        new
                        {
                            EventId = 4,
                            Name = "AddCode",
                            ServiceId = 1,
                            Text = "Add Code",
                            Text2 = "اضافة كود"
                        },
                        new
                        {
                            EventId = 5,
                            Name = "EditCode",
                            ServiceId = 1,
                            Text = "Edit Code",
                            Text2 = "تعديل كود"
                        },
                        new
                        {
                            EventId = 6,
                            Name = "EnableCode",
                            ServiceId = 1,
                            Text = "Enable Code",
                            Text2 = "تفعيل كود"
                        },
                        new
                        {
                            EventId = 7,
                            Name = "DisableCode",
                            ServiceId = 1,
                            Text = "Disable Code",
                            Text2 = "تعطيل كود"
                        });
                });

            modelBuilder.Entity("Audit.Domain.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text2")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ServiceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Text")
                        .IsUnique();

                    b.HasIndex("Text2")
                        .IsUnique()
                        .HasFilter("[Text2] IS NOT NULL");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            Name = "CodesManagement",
                            Text = "CodesManagement",
                            Text2 = "ادارة الاكواد"
                        });
                });

            modelBuilder.Entity("Audit.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("Audit.Domain.Entities.Event", "Event")
                        .WithMany("AuditLogs")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Audit.Domain.Entities.Service", "Service")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("Audit.Domain.Entities.AuditMetadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("AuditLogId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AuditLogId", "Id");

                            b1.ToTable("AuditLogs");

                            b1.ToJson("Metadata");

                            b1.WithOwner()
                                .HasForeignKey("AuditLogId");
                        });

                    b.Navigation("Event");

                    b.Navigation("Metadata");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Audit.Domain.Entities.Event", b =>
                {
                    b.HasOne("Audit.Domain.Entities.Service", "Service")
                        .WithMany("Events")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Audit.Domain.Entities.Event", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("Audit.Domain.Entities.Service", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
